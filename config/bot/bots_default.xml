<?xml version="1.0" encoding="UTF-8"?>
<bots>
    <TIGER_V2>
        <general>
            <!--distance from a path point the bot must start to brake [mm] AMoveSkill -->
            <maxBreakingDist>200</maxBreakingDist>
            <!-- breaks more if the value is smaller AMoveSkill -->
            <breakInCurve>1.0</breakInCurve>
            <!-- breaks more/earlier at the end of a path if the value is smaller 
				AMoveSkill -->
            <breakStrengthAtEndOfPath>0.8</breakStrengthAtEndOfPath>
            <POSITIONING_POST_AIMING>70</POSITIONING_POST_AIMING>
            <POSITIONING_PRE_AIMING>100</POSITIONING_PRE_AIMING>
        </general>
        <skillSystem>
            <rotate>
                <!-- Maximum rotate velocity [rad/s] -->
                <maxRotateVelocity>10</maxRotateVelocity>
                <!-- Maximum rotate acceleration [rad/s²] -->
                <maxRotateAcceleration>10.0</maxRotateAcceleration>
                <!-- This function maps the normal angle at path points to speed at this 
					point -->
                <normalAngleToSpeed>linear:2.0,0.0</normalAngleToSpeed>
            </rotate>
            <move>
                <!-- Maximum linear (X,Y) velocity [m/s] -->
                <maxLinearVelocity>3</maxLinearVelocity>
                <!-- Maximum linear (X,Y) acceleration [m/s²]  -->
                <maxLinearAcceleration>3</maxLinearAcceleration>
                <!-- when below, move is considered to be done [m/s] Aim,AimCon,DestCon -->
                <moveSpeedThreshold>0.5</moveSpeedThreshold>
            </move>
            <kicker>
                <chipDistanceFunc>poly2:0.000082713,1.3275,864.2</chipDistanceFunc>
                <refFiringDuration>10000</refFiringDuration>
                <refVelocity>15.0f</refVelocity>
            </kicker>
        </skillSystem>
    </TIGER_V2>
    <tiger>
        <general>
            <!--distance from a path point the bot must start to brake [mm] AMoveSkill -->
            <maxBreakingDist>50</maxBreakingDist>
            <!-- breaks more if the value is smaller AMoveSkill -->
            <breakInCurve>1.0</breakInCurve>
            <!-- breaks more/earlier at the end of a path if the value is smaller 
				AMoveSkill -->
            <breakStrengthAtEndOfPath>0.8</breakStrengthAtEndOfPath>
            <POSITIONING_POST_AIMING>70</POSITIONING_POST_AIMING>
            <POSITIONING_PRE_AIMING>200</POSITIONING_PRE_AIMING>
        </general>
        <skillSystem>
            <rotate>
                <!-- Maximum rotate velocity [rad/s] -->
                <maxRotateVelocity>12.0</maxRotateVelocity>
                <!-- Maximum rotate acceleration [rad/s²] -->
                <maxRotateAcceleration>6.0</maxRotateAcceleration>
                <!-- This function maps the normal angle at path points to speed at this 
					point -->
                <normalAngleToSpeed>linear:2.0,0.0</normalAngleToSpeed>
            </rotate>
            <move>
                <!-- Maximum linear (X,Y) velocity [m/s] -->
                <maxLinearVelocity>3.0</maxLinearVelocity>
                <!-- Maximum linear (X,Y) acceleration [m/s²]  -->
                <maxLinearAcceleration>3.0</maxLinearAcceleration>
                <!-- when below, move is considered to be done [m/s] Aim,AimCon,DestCon -->
                <moveSpeedThreshold>0.5</moveSpeedThreshold>
            </move>
            <kicker>
                <refVelocity>50.0f</refVelocity>
            </kicker>
        </skillSystem>
    </tiger>
    <grSim>
        <general>
            <POSITIONING_POST_AIMING>70</POSITIONING_POST_AIMING>
        </general>
        <skillSystem>
            <kicker>
                <refFiringDuration>10000</refFiringDuration>
                <refVelocity>11.05f</refVelocity>
                <!-- function for calculating the duration for a given distance -->
                <chipDistanceFunc>poly2:-0.00015684,2.1627,2370.2</chipDistanceFunc>
                <!-- function for calculating the dribble speed for a given distance -->
                <chipDribbleFunc>poly2:-0.00023526,3.2441,9055.3</chipDribbleFunc>
            </kicker>
        </skillSystem>
    </grSim>
    <default>
        <!-- This contains general information about our robot, which is only used 
			to do some calculations in the AI. THEY HAVE NOT EFFECT ON THE ACTUAL MOVEMENT! -->
        <general>
            <!--distance from a path point the bot must start to brake [mm] AMoveSkill -->
            <maxBreakingDist>50</maxBreakingDist>
            <!-- breaks more if the value is smaller AMoveSkill -->
            <breakInCurve>1.0</breakInCurve>
            <!-- breaks more/earlier at the end of a path if the value is smaller 
				AMoveSkill -->
            <breakStrengthAtEndOfPath>0.8</breakStrengthAtEndOfPath>
            <!-- If a bot is driving the path is rerfeshed according to this interval[ms] -->
            <pathPlanningInterval>20</pathPlanningInterval>
            <!-- wait some frames when we have the ball, so dribbler can fix ball 
				possession -->
            <MIN_FRAMES_HAVE_BALL>20</MIN_FRAMES_HAVE_BALL>
            <!-- distance between bot and ball when the bot shall start dribbling -->
            <DRIBBLING_DISTANCE>300</DRIBBLING_DISTANCE>
            <!-- this tolerance value is used to come close to the ball in order to 
				aim afterwards (distance from center of bot and ball) [mm] -->
            <POSITIONING_PRE_AIMING>150</POSITIONING_PRE_AIMING>
            <!-- this tolerance value is used to actually get the ball (distance from 
				center of bot and ball) [mm] -->
            <POSITIONING_POST_AIMING>70</POSITIONING_POST_AIMING>
            <!-- steps [mm] to pull the ball backwards -->
            <STEP_SIZE_PULL_BACK>50</STEP_SIZE_PULL_BACK>
            <!-- angle steps [RAD] to pull the ball back-/sidewards -->
            <STEP_SIZE_PULL_BACK_ANGLE>0.9f</STEP_SIZE_PULL_BACK_ANGLE>
            <!-- this factor indicates how much the speed of the ball is reduced on a damp -->
            <ballDampFactor>0.004f</ballDampFactor>
        </general>
        <!-- This tolerances are used in conditions and skills to determine whether 
			a action has been completed -->
        <tolerances>
            <!--this tolerance value is used to check if a bot has reached its destination. 
				[mm] -->
            <positioning>50</positioning>
            <!--this tolerance value is used to check if the viewing direction of 
				the bot is correct. [deg] -->
            <viewAngle>10</viewAngle>
            <!--this tolerance value is used to check if the aiming of the bot is 
				correct. [deg] -->
            <aiming>5</aiming>
            <!-- distance bot-ball when aim is considered done (bot and ball radius 
				exclusive) [mm] -->
            <nearBall>60</nearBall>
            <!-- minimum distance bot-ball we need to be "am Ball". (bot+ball radius 
				exclusive) [mm] -->
            <nextToBall>30</nextToBall>
            <!-- Tolerance radius between the center of two bots, up to which the 
				destination of the two bots is considered to be equal [mm] -->
            <destEqualRadius>180</destEqualRadius>
        </tolerances>
        <skillSystem>
            <rotate>
                <!-- [rad/s] ABallMoveCalculator -->
                <maxTurnSpeed>10</maxTurnSpeed>
                <!-- when below, rotation is considered to be done [rad/s] ABallMoveCalculator -->
                <rotationSpeedThreshold>0.1</rotationSpeedThreshold>
                <!-- Maximum rotate velocity [rad/s] -->
                <maxRotateVelocity>12.0</maxRotateVelocity>
                <!-- Maximum rotate acceleration [rad/s²] -->
                <maxRotateAcceleration>6.0</maxRotateAcceleration>
                <!-- This function maps the normal angle at path points to speed at this 
					point -->
                <normalAngleToSpeed>linear:2.0,0.0</normalAngleToSpeed>
            </rotate>
            <!-- The following parameters influence the behavior of the move commands -->
            <move>
                <!-- Maximum linear (X,Y) velocity [m/s] -->
                <maxLinearVelocity>3.0</maxLinearVelocity>
                <!-- Maximum linear (X,Y) acceleration [m/s²] -->
                <maxLinearAcceleration>3.0</maxLinearAcceleration>
                <!-- when below, move is considered to be done [m/s] Aim,AimCon,DestCon -->
                <moveSpeedThreshold>0.5</moveSpeedThreshold>
            </move>
            <dribble>
                <!-- max velocity of dribble bar [rpm] -->
                <refRPM>10000</refRPM>
            </dribble>
            <kicker>
                <!-- friction between ball and green when sliding [1] -->
                <ballFrictionSlide>0.5f</ballFrictionSlide>
                <!-- friction between ball and green when rolling [1] -->
                <ballFrictionRoll>0.05</ballFrictionRoll>
                <!-- the smallest duration, which results in the fastest shoot[us] -->
                <refFiringDuration>10000</refFiringDuration>
                <!-- the velocity of the ball at refFiringDuration [m/s] -->
                <refVelocity>3.9f</refVelocity>
                <!-- percentage of start velocity at which the ball begins to roll [%] -->
                <edgeFactor>0.5f</edgeFactor>
                <!-- [mm/s] DefensePoints only atm... -->
                <maxShootVelocity>8.0f</maxShootVelocity>
                <!-- [V] kicker considered discharged if level lowered by this value -->
                <kickerDischargeTreshold>10</kickerDischargeTreshold>
                <!-- function for calculating the duration for a given distance -->
                <chipDistanceFunc>poly2:0.000091575,0.61355,1098.9</chipDistanceFunc>
                <!-- function for calculating the dribble speed for a given distance -->
                <chipDribbleFunc>poly2:0.000091575,0.61355,898.9</chipDribbleFunc>
                <!-- function for calculating the dribble speed for a given distance -->
                <kickDribbleFunc>poly2:-0.00023526,3.2441,9055.3</kickDribbleFunc>
            </kicker>
        </skillSystem>
    </default>
</bots>
