/*
 * *********************************************************
 * Copyright (c) 2009 - 2013, DHBW Mannheim - Tigers Mannheim
 * Project: TIGERS - Sumatra
 * Date: Oct 10, 2013
 * Author(s): Nicolai Ommer <nicolai.ommer@gmail.com>
 * *********************************************************
 */
package edu.dhbw.mannheim.tigers.sumatra.model.data.modules.ai;

import java.util.HashMap;
import java.util.Map;

import net.sf.oval.constraint.AssertValid;
import net.sf.oval.constraint.NotNull;

import com.sleepycat.persist.model.Persistent;

import edu.dhbw.mannheim.tigers.sumatra.model.data.frames.AIInfoFrame;
import edu.dhbw.mannheim.tigers.sumatra.model.data.trackedobjects.ids.BotID;
import edu.dhbw.mannheim.tigers.sumatra.model.modules.impls.ai.ares.Ares;


/**
 * Container for data generated by {@link Ares} for the {@link AIInfoFrame}
 * 
 * @author Nicolai Ommer <nicolai.ommer@gmail.com>
 */
@Persistent(version = 4)
public class AresData
{
	@NotNull
	@AssertValid
	private final Map<BotID, DrawablePath>	paths			= new HashMap<BotID, DrawablePath>();
	
	@NotNull
	@AssertValid
	/** latest paths from PP thread. Not the currently executed ones! */
	private final Map<BotID, DrawablePath>	latestPaths	= new HashMap<BotID, DrawablePath>();
	
	@NotNull
	private final Map<BotID, Integer>		numPaths		= new HashMap<BotID, Integer>();
	
	@NotNull
	private final Map<BotID, String>			skills		= new HashMap<BotID, String>();
	
	
	/**
	 */
	public AresData()
	{
	}
	
	
	/**
	 * @param aresData
	 */
	public AresData(final AresData aresData)
	{
		paths.putAll(aresData.paths);
		latestPaths.putAll(aresData.latestPaths);
		numPaths.putAll(aresData.numPaths);
		skills.putAll(aresData.skills);
	}
	
	
	/**
	 * @return the paths
	 */
	public Map<BotID, DrawablePath> getPaths()
	{
		return (paths);
	}
	
	
	/**
	 * @return the latestPaths
	 */
	public Map<BotID, DrawablePath> getLatestPaths()
	{
		return (latestPaths);
	}
	
	
	/**
	 * Number of new paths that were used in current Pathplanning episode (Skill)
	 * 
	 * @param botId
	 * @return
	 */
	public int getNumberOfPaths(final BotID botId)
	{
		Integer counter = numPaths.get(botId);
		if (counter == null)
		{
			return 0;
		}
		return counter;
	}
	
	
	/**
	 * @return the numPaths
	 */
	public Map<BotID, Integer> getNumPaths()
	{
		return numPaths;
	}
	
	
	/**
	 * @return the skills
	 */
	public final Map<BotID, String> getSkills()
	{
		return skills;
	}
}
