/*
 * Copyright (c) 2009 - 2018, DHBW Mannheim - TIGERs Mannheim
 */

package edu.tigers.sumatra.ai.metis.support;

import java.awt.Color;
import java.util.List;
import java.util.stream.Collectors;

import edu.tigers.sumatra.ai.BaseAiFrame;
import edu.tigers.sumatra.ai.metis.ACalculator;
import edu.tigers.sumatra.ai.metis.EAiShapesLayer;
import edu.tigers.sumatra.ai.metis.TacticalField;
import edu.tigers.sumatra.ai.metis.support.passtarget.PassTargetRatingFactory;
import edu.tigers.sumatra.ai.metis.support.passtarget.PassTargetRatingFactoryInput;
import edu.tigers.sumatra.ai.metis.support.passtarget.RatedPassTargetNoScore;
import edu.tigers.sumatra.ai.metis.targetrater.IPassRater;
import edu.tigers.sumatra.ai.metis.targetrater.PassInterceptionRater;
import edu.tigers.sumatra.drawable.DrawableAnnotation;
import edu.tigers.sumatra.drawable.IDrawableShape;
import edu.tigers.sumatra.math.vector.Vector2;
import edu.tigers.sumatra.wp.data.ITrackedBot;


/**
 * This class rates the PassTargets created by PassTargetGenerationCalc
 */
public class PassTargetRatingCalc extends ACalculator
{
	private final PassTargetRatingFactory ratingFactory = new PassTargetRatingFactory();
	
	
	@Override
	public void doCalc(final TacticalField newTacticalField, final BaseAiFrame baseAiFrame)
	{
		List<ITrackedBot> consideredBots = getWFrame().getFoeBots().values().stream()
				.filter(b -> b.getBotId() != getAiFrame().getKeeperFoeId())
				.collect(Collectors.toList());
		final IPassRater passRater = new PassInterceptionRater(consideredBots);
		final PassTargetRatingFactoryInput ratingFactoryInput = PassTargetRatingFactoryInput.fromAiFrame(getAiFrame());
		
		// Rate PassTargets generated by PassTargetGenerationCalc, ScoreMode will be selected in PassTargetSelectionCalc
		final List<RatedPassTargetNoScore> allRatedPassTargetsNoScore = newTacticalField.getAllPassTargets().stream()
				.map(passTarget -> new RatedPassTargetNoScore(passTarget,
						ratingFactory.ratingFromPassTargetAndInput(passTarget, passRater, ratingFactoryInput)))
				.collect(Collectors.toList());
		
		getNewTacticalField().setAllRatedPassTargetsNoScore(allRatedPassTargetsNoScore);
		drawPassTargets(allRatedPassTargetsNoScore);
	}
	
	
	private void drawPassTargets(final List<RatedPassTargetNoScore> passTargets)
	{
		final List<IDrawableShape> shapes = getNewTacticalField().getDrawableShapes()
				.get(EAiShapesLayer.PASS_TARGET_RATINGS);
		
		for (RatedPassTargetNoScore target : passTargets)
		{
			DrawableAnnotation dPassGoalKickScore = new DrawableAnnotation(target.getPos(),
					"p:" + scoreToStr(target.getPassTargetRating().getPassScore()) + "| g:"
							+ scoreToStr(target.getPassTargetRating().getGoalKickScore()),
					Color.black);
			dPassGoalKickScore.withFontHeight(10);
			dPassGoalKickScore.withCenterHorizontally(true);
			dPassGoalKickScore.withOffset(Vector2.fromXY(0, 20));
			shapes.add(dPassGoalKickScore);
		}
	}
	
	
	private String scoreToStr(final double passScore)
	{
		return Long.toString(Math.round(passScore * 100));
	}
}
